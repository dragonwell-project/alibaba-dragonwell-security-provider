name: Continuous integration

on:
  push:
  pull_request:
  schedule:
    # Run every day at midnight UTC
    - cron: '0 0 * * *'

jobs:
  tongsuo_clone:
    # This step ensures that all builders have the same version of Tongsuo SSL
    runs-on: ubuntu-latest

    steps:
      - name: Clone Tongsuo repo
        run: |
          git clone --depth 1 --filter=blob:none --no-checkout -b 8.3-stable https://github.com/Tongsuo-Project/Tongsuo.git "${{ runner.temp }}/Tongsuo"
          echo Using Tongsuo commit: $(cd "${{ runner.temp }}/Tongsuo"; git rev-parse HEAD)

      - name: Archive Tongsuo source
        uses: actions/upload-artifact@v1
        with:
          name: tongsuo-source
          path: ${{ runner.temp }}/Tongsuo

  build:
    needs: tongsuo_clone

    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Set up JDK 11 for toolchains
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 11

      - name: Set runner-specific environment variables
        shell: bash
        run: |
          echo "TONGSUO_HOME=${{ runner.temp }}/Tongsuo" >> $GITHUB_ENV
          echo "M2_REPO=${{ runner.temp }}/m2" >> $GITHUB_ENV

      - uses: actions/checkout@v2

      - name: Setup Linux environment
        if: runner.os == 'Linux'
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

          sudo add-apt-repository ppa:openjdk-r/ppa
          sudo apt-get -qq update
          sudo apt-get -qq install -y --no-install-recommends \
            gcc-multilib \
            g++-multilib \
            openjdk-11-jre-headless

      - name: Fetch Tongsuo source
        uses: actions/download-artifact@v1
        with:
          name: tongsuo-source
          path: ${{ runner.temp }}/Tongsuo

      - name: Checkout Tongsuo 8.3-stable branch
        shell: bash
        run: |
          cd "$TONGSUO_HOME"
          git checkout --progress --force 8.3-stable

      - name: Build Tongsuo 64-bit Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          mkdir -p "$TONGSUO_HOME/build64"
          pushd "$TONGSUO_HOME"
          ./config --prefix=$TONGSUO_HOME/build64 enable-weak-ssl-ciphers
          make -s -j4
          make install
          popd

      - name: Build with Gradle
        shell: bash
        run: ./gradlew assemble -PcheckErrorQueue

      - name: Test with Gradle
        shell: bash
        run: ./gradlew test -PcheckErrorQueue

      - name: Other checks with Gradle
        shell: bash
        run: ./gradlew check -PcheckErrorQueue

      - name: Publish to local Maven repo
        shell: bash
        run: ./gradlew publishToMavenLocal -Dmaven.repo.local="$M2_REPO"

      - name: Upload Maven respository
        uses: actions/upload-artifact@v1
        with:
          name: m2repo-${{ runner.os }}
          path: ${{ runner.temp }}/m2

      - name: Build test JAR with dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: ./gradlew :conscrypt-openjdk:testJar -PcheckErrorQueue

      - name: Upload test JAR with dependencies
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v2
        with:
          name: testjar
          path: openjdk/build/libs/conscrypt-openjdk-*-tests.jar
          if-no-files-found: error

  uberjar:
    needs: build

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set runner-specific environment variables
        shell: bash
        run: |
          echo "M2_REPO=${{ runner.temp }}/m2" >> $GITHUB_ENV
          echo "TONGSUO_HOME=${{ runner.temp }}/Tongsuo" >> $GITHUB_ENV

      - name: Fetch Tongsuo source
        uses: actions/download-artifact@v1
        with:
          name: tongsuo-source
          path: ${{ runner.temp }}/Tongsuo

      - name: Make fake Tongsuo directories
        shell: bash
        run: |
          # TODO: remove this when the check is only performed when building.
          # BoringSSL is not needed during the UberJAR build, but the
          # assertion to check happens regardless of whether the project
          # needs it.
          mkdir -p "${{ runner.temp }}/Tongsuo/build64"
          mkdir -p "${{ runner.temp }}/Tongsuo/include"

      - name: Download Maven repository for Linux
        uses: actions/download-artifact@v1
        with:
          name: m2repo-Linux
          path: ${{ runner.temp }}/m2

      - name: Build UberJAR with Gradle
        shell: bash
        run: |
          ./gradlew :conscrypt-openjdk-uber:build -Dorg.conscrypt.openjdk.buildUberJar=true -Dmaven.repo.local="$M2_REPO"

      - name: Publish UberJAR to Maven Local
        shell: bash
        run: |
          ./gradlew :conscrypt-openjdk-uber:publishToMavenLocal -Dorg.conscrypt.openjdk.buildUberJar=true -Dmaven.repo.local="$M2_REPO"

      - name: Upload Maven respository
        uses: actions/upload-artifact@v1
        with:
          name: m2repo-uber
          path: ${{ runner.temp }}/m2

  openjdk-test:
    needs: uberjar

    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest]
        java: [8, 11]
        include:
          - java: 8
            suite_class: "org.conscrypt.Conscrypt(OpenJdk)?Suite"
          - java: 11
            suite_class: "org.conscrypt.Conscrypt(OpenJdk)?Suite"

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}

      - name: Download UberJAR
        uses: actions/download-artifact@v2
        with:
          name: m2repo-uber
          path: m2

      - name: Download Test JAR with Dependencies
        uses: actions/download-artifact@v2
        with:
          name: testjar
          path: testjar

      - name: Download JUnit runner
        shell: bash
        run: mvn org.apache.maven.plugins:maven-dependency-plugin:3.1.2:copy -Dartifact=org.junit.platform:junit-platform-console-standalone:1.6.2 -DoutputDirectory=. -Dmdep.stripVersion=true

      - name: Run JUnit tests
        shell: bash
        run: |
          DIR="$(find m2/org/conscrypt/conscrypt-openjdk-uber -maxdepth 1 -mindepth 1 -type d -print)"
          VERSION="${DIR##*/}"
          TESTJAR="$(find testjar -name '*-tests.jar')"
          java -jar junit-platform-console-standalone.jar -cp "$DIR/conscrypt-openjdk-uber-$VERSION.jar:$TESTJAR" -n='${{ matrix.suite_class }}' --scan-classpath --reports-dir=results --fail-if-no-tests

      - name: Archive test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: test-results-${{ matrix.platform }}-${{ matrix.java }}
          path: results
